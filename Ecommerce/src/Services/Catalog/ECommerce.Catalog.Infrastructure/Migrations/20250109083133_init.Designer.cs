// <auto-generated />
using System;
using ECommerce.Catalog.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerce.Catalog.Infrastructure.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    [Migration("20250109083133_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerce.Catalog.Domain.Aggregates.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 1, 9, 8, 31, 32, 875, DateTimeKind.Utc).AddTicks(2356),
                            Name = "Elektronik"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 1, 9, 8, 31, 32, 875, DateTimeKind.Utc).AddTicks(2359),
                            Name = "Kırtasiye"
                        });
                });

            modelBuilder.Entity("ECommerce.Catalog.Domain.Aggregates.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4bcc145a-0098-4c76-abab-c27c285935cd"),
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 1, 9, 8, 31, 32, 875, DateTimeKind.Utc).AddTicks(2393),
                            Description = "Apple Iphone 12",
                            ImageUrl = "iphone12.jpg",
                            Name = "Iphone 12",
                            Price = 10000m,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("3f95ca6a-fa07-4251-92d9-0cdb70fd9172"),
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 1, 9, 8, 31, 32, 875, DateTimeKind.Utc).AddTicks(2398),
                            Description = "Samsung S21",
                            ImageUrl = "samsungs21.jpg",
                            Name = "Samsung S21",
                            Price = 9000m,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("3f7fc6a0-1746-4ddb-aa35-94f44a5eb945"),
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 1, 9, 8, 31, 32, 875, DateTimeKind.Utc).AddTicks(2400),
                            Description = "Kırmızı Kalem",
                            ImageUrl = "kalem.jpg",
                            Name = "Kalem",
                            Price = 10m,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("2bb7aed0-3021-4478-b793-f0484f5717ce"),
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 1, 9, 8, 31, 32, 875, DateTimeKind.Utc).AddTicks(2402),
                            Description = "A5 Defter",
                            ImageUrl = "defter.jpg",
                            Name = "Defter",
                            Price = 20m,
                            Stock = 100
                        });
                });

            modelBuilder.Entity("ECommerce.Catalog.Domain.Aggregates.Product", b =>
                {
                    b.HasOne("ECommerce.Catalog.Domain.Aggregates.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ECommerce.Catalog.Domain.Aggregates.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
